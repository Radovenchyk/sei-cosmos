// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/accesscontrol/accesscontrol.proto

package accesscontrol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccessOperation struct {
	AccessType         AccessType   `protobuf:"varint,1,opt,name=access_type,json=accessType,proto3,enum=cosmos.accesscontrol.v1beta1.AccessType" json:"access_type,omitempty"`
	ResourceType       ResourceType `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=cosmos.accesscontrol.v1beta1.ResourceType" json:"resource_type,omitempty"`
	IdentifierTemplate string       `protobuf:"bytes,3,opt,name=identifier_template,json=identifierTemplate,proto3" json:"identifier_template,omitempty"`
}

func (m *AccessOperation) Reset()         { *m = AccessOperation{} }
func (m *AccessOperation) String() string { return proto.CompactTextString(m) }
func (*AccessOperation) ProtoMessage()    {}
func (*AccessOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d636a082612ba091, []int{0}
}
func (m *AccessOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessOperation.Merge(m, src)
}
func (m *AccessOperation) XXX_Size() int {
	return m.Size()
}
func (m *AccessOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessOperation.DiscardUnknown(m)
}

var xxx_messageInfo_AccessOperation proto.InternalMessageInfo

func (m *AccessOperation) GetAccessType() AccessType {
	if m != nil {
		return m.AccessType
	}
	return AccessType_UNKNOWN
}

func (m *AccessOperation) GetResourceType() ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return ResourceType_ANY
}

func (m *AccessOperation) GetIdentifierTemplate() string {
	if m != nil {
		return m.IdentifierTemplate
	}
	return ""
}

type WasmAccessOperation struct {
	Operation    *AccessOperation            `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	SelectorType AccessOperationSelectorType `protobuf:"varint,2,opt,name=selector_type,json=selectorType,proto3,enum=cosmos.accesscontrol.v1beta1.AccessOperationSelectorType" json:"selector_type,omitempty"`
	Selector     string                      `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (m *WasmAccessOperation) Reset()         { *m = WasmAccessOperation{} }
func (m *WasmAccessOperation) String() string { return proto.CompactTextString(m) }
func (*WasmAccessOperation) ProtoMessage()    {}
func (*WasmAccessOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d636a082612ba091, []int{1}
}
func (m *WasmAccessOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WasmAccessOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WasmAccessOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WasmAccessOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmAccessOperation.Merge(m, src)
}
func (m *WasmAccessOperation) XXX_Size() int {
	return m.Size()
}
func (m *WasmAccessOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmAccessOperation.DiscardUnknown(m)
}

var xxx_messageInfo_WasmAccessOperation proto.InternalMessageInfo

func (m *WasmAccessOperation) GetOperation() *AccessOperation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *WasmAccessOperation) GetSelectorType() AccessOperationSelectorType {
	if m != nil {
		return m.SelectorType
	}
	return AccessOperationSelectorType_NONE
}

func (m *WasmAccessOperation) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type WasmAccessOperations struct {
	MessageName    string                 `protobuf:"bytes,1,opt,name=message_name,json=messageName,proto3" json:"message_name,omitempty"`
	WasmOperations []*WasmAccessOperation `protobuf:"bytes,2,rep,name=wasm_operations,json=wasmOperations,proto3" json:"wasm_operations,omitempty"`
}

func (m *WasmAccessOperations) Reset()         { *m = WasmAccessOperations{} }
func (m *WasmAccessOperations) String() string { return proto.CompactTextString(m) }
func (*WasmAccessOperations) ProtoMessage()    {}
func (*WasmAccessOperations) Descriptor() ([]byte, []int) {
	return fileDescriptor_d636a082612ba091, []int{2}
}
func (m *WasmAccessOperations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WasmAccessOperations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WasmAccessOperations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WasmAccessOperations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmAccessOperations.Merge(m, src)
}
func (m *WasmAccessOperations) XXX_Size() int {
	return m.Size()
}
func (m *WasmAccessOperations) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmAccessOperations.DiscardUnknown(m)
}

var xxx_messageInfo_WasmAccessOperations proto.InternalMessageInfo

func (m *WasmAccessOperations) GetMessageName() string {
	if m != nil {
		return m.MessageName
	}
	return ""
}

func (m *WasmAccessOperations) GetWasmOperations() []*WasmAccessOperation {
	if m != nil {
		return m.WasmOperations
	}
	return nil
}

type MessageDependencyMapping struct {
	MessageKey     string            `protobuf:"bytes,1,opt,name=message_key,json=messageKey,proto3" json:"message_key,omitempty"`
	AccessOps      []AccessOperation `protobuf:"bytes,2,rep,name=access_ops,json=accessOps,proto3" json:"access_ops"`
	DynamicEnabled bool              `protobuf:"varint,3,opt,name=dynamic_enabled,json=dynamicEnabled,proto3" json:"dynamic_enabled,omitempty"`
}

func (m *MessageDependencyMapping) Reset()         { *m = MessageDependencyMapping{} }
func (m *MessageDependencyMapping) String() string { return proto.CompactTextString(m) }
func (*MessageDependencyMapping) ProtoMessage()    {}
func (*MessageDependencyMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_d636a082612ba091, []int{3}
}
func (m *MessageDependencyMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageDependencyMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageDependencyMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageDependencyMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageDependencyMapping.Merge(m, src)
}
func (m *MessageDependencyMapping) XXX_Size() int {
	return m.Size()
}
func (m *MessageDependencyMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageDependencyMapping.DiscardUnknown(m)
}

var xxx_messageInfo_MessageDependencyMapping proto.InternalMessageInfo

func (m *MessageDependencyMapping) GetMessageKey() string {
	if m != nil {
		return m.MessageKey
	}
	return ""
}

func (m *MessageDependencyMapping) GetAccessOps() []AccessOperation {
	if m != nil {
		return m.AccessOps
	}
	return nil
}

func (m *MessageDependencyMapping) GetDynamicEnabled() bool {
	if m != nil {
		return m.DynamicEnabled
	}
	return false
}

type WasmDependencyMapping struct {
	Enabled          bool                    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BaseAccessOps    []*WasmAccessOperation  `protobuf:"bytes,2,rep,name=base_access_ops,json=baseAccessOps,proto3" json:"base_access_ops,omitempty"`
	QueryAccessOps   []*WasmAccessOperations `protobuf:"bytes,3,rep,name=query_access_ops,json=queryAccessOps,proto3" json:"query_access_ops,omitempty"`
	ExecuteAccessOps []*WasmAccessOperations `protobuf:"bytes,4,rep,name=execute_access_ops,json=executeAccessOps,proto3" json:"execute_access_ops,omitempty"`
	ResetReason      string                  `protobuf:"bytes,5,opt,name=reset_reason,json=resetReason,proto3" json:"reset_reason,omitempty"`
	ContractAddress  string                  `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *WasmDependencyMapping) Reset()         { *m = WasmDependencyMapping{} }
func (m *WasmDependencyMapping) String() string { return proto.CompactTextString(m) }
func (*WasmDependencyMapping) ProtoMessage()    {}
func (*WasmDependencyMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_d636a082612ba091, []int{4}
}
func (m *WasmDependencyMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WasmDependencyMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WasmDependencyMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WasmDependencyMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmDependencyMapping.Merge(m, src)
}
func (m *WasmDependencyMapping) XXX_Size() int {
	return m.Size()
}
func (m *WasmDependencyMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmDependencyMapping.DiscardUnknown(m)
}

var xxx_messageInfo_WasmDependencyMapping proto.InternalMessageInfo

func (m *WasmDependencyMapping) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *WasmDependencyMapping) GetBaseAccessOps() []*WasmAccessOperation {
	if m != nil {
		return m.BaseAccessOps
	}
	return nil
}

func (m *WasmDependencyMapping) GetQueryAccessOps() []*WasmAccessOperations {
	if m != nil {
		return m.QueryAccessOps
	}
	return nil
}

func (m *WasmDependencyMapping) GetExecuteAccessOps() []*WasmAccessOperations {
	if m != nil {
		return m.ExecuteAccessOps
	}
	return nil
}

func (m *WasmDependencyMapping) GetResetReason() string {
	if m != nil {
		return m.ResetReason
	}
	return ""
}

func (m *WasmDependencyMapping) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*AccessOperation)(nil), "cosmos.accesscontrol.v1beta1.AccessOperation")
	proto.RegisterType((*WasmAccessOperation)(nil), "cosmos.accesscontrol.v1beta1.WasmAccessOperation")
	proto.RegisterType((*WasmAccessOperations)(nil), "cosmos.accesscontrol.v1beta1.WasmAccessOperations")
	proto.RegisterType((*MessageDependencyMapping)(nil), "cosmos.accesscontrol.v1beta1.MessageDependencyMapping")
	proto.RegisterType((*WasmDependencyMapping)(nil), "cosmos.accesscontrol.v1beta1.WasmDependencyMapping")
}

func init() {
	proto.RegisterFile("cosmos/accesscontrol/accesscontrol.proto", fileDescriptor_d636a082612ba091)
}

var fileDescriptor_d636a082612ba091 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0xbb, 0x14, 0x91, 0xbe, 0x85, 0x96, 0x0c, 0x98, 0x6c, 0x88, 0x59, 0xa0, 0x31, 0xb1,
	0x9a, 0xd0, 0x4a, 0x3d, 0x79, 0x84, 0xe8, 0x41, 0x09, 0x92, 0xac, 0x24, 0x46, 0x62, 0x5c, 0xa7,
	0xb3, 0xaf, 0x75, 0x43, 0x77, 0x66, 0xdd, 0x99, 0xaa, 0xfb, 0x2d, 0xbc, 0x78, 0xf1, 0x93, 0xf8,
	0x11, 0x38, 0x72, 0xf4, 0x44, 0x0c, 0x7c, 0x11, 0xb3, 0x33, 0xb3, 0x6d, 0x81, 0xa6, 0xb1, 0x9c,
	0x76, 0xdf, 0x67, 0xde, 0xf7, 0x37, 0xcf, 0xb3, 0x7f, 0x06, 0x9a, 0x4c, 0xc8, 0x58, 0xc8, 0x36,
	0x65, 0x0c, 0xa5, 0x64, 0x82, 0xab, 0x54, 0xf4, 0xaf, 0x56, 0xad, 0x24, 0x15, 0x4a, 0x90, 0xfb,
	0xa6, 0xb3, 0x75, 0x75, 0xed, 0xeb, 0x4e, 0x17, 0x15, 0xdd, 0x59, 0x5f, 0xeb, 0x89, 0x9e, 0xd0,
	0x8d, 0xed, 0xfc, 0xce, 0xcc, 0xac, 0x3f, 0x98, 0x48, 0x67, 0x82, 0x4b, 0x45, 0xb9, 0x92, 0xa6,
	0xab, 0x71, 0xee, 0x40, 0x7d, 0x57, 0x77, 0x1c, 0x26, 0x98, 0x52, 0x15, 0x09, 0x4e, 0x5e, 0x42,
	0xd5, 0x0c, 0x05, 0x2a, 0x4b, 0xd0, 0x75, 0x36, 0x9d, 0x66, 0xad, 0xd3, 0x6c, 0x4d, 0xf3, 0xd0,
	0x32, 0x8c, 0xa3, 0x2c, 0x41, 0x1f, 0xe8, 0xf0, 0x9e, 0x1c, 0xc2, 0x72, 0x8a, 0x52, 0x0c, 0x52,
	0x86, 0x06, 0x36, 0xa7, 0x61, 0x8f, 0xa7, 0xc3, 0x7c, 0x3b, 0xa2, 0x71, 0x4b, 0xe9, 0x58, 0x45,
	0xda, 0xb0, 0x1a, 0x85, 0xc8, 0x55, 0xf4, 0x29, 0xc2, 0x34, 0x50, 0x18, 0x27, 0x7d, 0xaa, 0xd0,
	0x2d, 0x6f, 0x3a, 0xcd, 0x8a, 0x4f, 0x46, 0x4b, 0x47, 0x76, 0x25, 0x0f, 0xb8, 0xfa, 0x96, 0xca,
	0xf8, 0x7a, 0xc8, 0x7d, 0xa8, 0x88, 0xa2, 0xd0, 0x11, 0xab, 0x9d, 0xed, 0xff, 0x89, 0x38, 0x24,
	0xf8, 0xa3, 0x79, 0xf2, 0x01, 0x96, 0x25, 0xf6, 0x91, 0x29, 0x91, 0x8e, 0xc7, 0x7c, 0x36, 0x13,
	0xf0, 0x8d, 0x25, 0x98, 0xd4, 0x72, 0xac, 0x22, 0xeb, 0xb0, 0x58, 0xd4, 0x36, 0xea, 0xb0, 0x6e,
	0xfc, 0x74, 0x60, 0x6d, 0x42, 0x40, 0x49, 0xb6, 0x60, 0x29, 0x46, 0x29, 0x69, 0x0f, 0x03, 0x4e,
	0x63, 0xf3, 0x1e, 0x2b, 0x7e, 0xd5, 0x6a, 0xaf, 0x69, 0x8c, 0xe4, 0x18, 0xea, 0xdf, 0xa8, 0x8c,
	0x83, 0x61, 0x12, 0xe9, 0xce, 0x6d, 0x96, 0x9b, 0xd5, 0xce, 0xce, 0x74, 0xe7, 0x13, 0xf6, 0xf3,
	0x6b, 0x39, 0x69, 0xb4, 0x7d, 0xe3, 0xb7, 0x03, 0xee, 0x81, 0xd9, 0xeb, 0x39, 0x26, 0xc8, 0x43,
	0xe4, 0x2c, 0x3b, 0xa0, 0x49, 0x12, 0xf1, 0x1e, 0xd9, 0x80, 0xc2, 0x47, 0x70, 0x82, 0x99, 0xb5,
	0x06, 0x56, 0xda, 0xc7, 0x8c, 0xf8, 0x60, 0x3f, 0xa3, 0x40, 0x24, 0x85, 0xa9, 0xd9, 0xde, 0xcf,
	0xde, 0xfc, 0xe9, 0xf9, 0x46, 0xc9, 0xaf, 0x50, 0x2b, 0x4b, 0xf2, 0x10, 0xea, 0x61, 0xc6, 0x69,
	0x1c, 0xb1, 0x00, 0x39, 0xed, 0xf6, 0x31, 0xd4, 0x0f, 0x73, 0xd1, 0xaf, 0x59, 0xf9, 0x85, 0x51,
	0x1b, 0xbf, 0xca, 0x70, 0x2f, 0x8f, 0x78, 0xd3, 0xb7, 0x0b, 0x77, 0x8b, 0x51, 0x47, 0x8f, 0x16,
	0x25, 0x79, 0x07, 0xf5, 0x2e, 0x95, 0x18, 0xdc, 0x70, 0x7d, 0x8b, 0x47, 0xb9, 0x9c, 0x93, 0x76,
	0x87, 0xbe, 0xdf, 0xc3, 0xca, 0x97, 0x01, 0xa6, 0xd9, 0x38, 0xbb, 0xac, 0xd9, 0x9d, 0x99, 0xd9,
	0xd2, 0xaf, 0x69, 0xd6, 0x88, 0xfe, 0x11, 0x08, 0x7e, 0x47, 0x36, 0x50, 0x57, 0xbc, 0xcf, 0xdf,
	0x9a, 0xbf, 0x62, 0x69, 0xa3, 0x1d, 0xb6, 0x20, 0xff, 0x87, 0x51, 0x05, 0x29, 0x52, 0x29, 0xb8,
	0x7b, 0xc7, 0x7c, 0x88, 0x5a, 0xf3, 0xb5, 0x44, 0x1e, 0xc1, 0x8a, 0x86, 0x53, 0xa6, 0x02, 0x1a,
	0x86, 0x29, 0x4a, 0xe9, 0x2e, 0xe8, 0xb6, 0x7a, 0xa1, 0xef, 0x1a, 0x79, 0xef, 0xd5, 0xe9, 0x85,
	0xe7, 0x9c, 0x5d, 0x78, 0xce, 0xdf, 0x0b, 0xcf, 0xf9, 0x71, 0xe9, 0x95, 0xce, 0x2e, 0xbd, 0xd2,
	0x9f, 0x4b, 0xaf, 0x74, 0xfc, 0xa4, 0x17, 0xa9, 0xcf, 0x83, 0x6e, 0x8b, 0x89, 0xb8, 0x6d, 0x0f,
	0x3f, 0x73, 0xd9, 0x96, 0xe1, 0x49, 0x3b, 0xff, 0x2f, 0xaf, 0x9d, 0x86, 0xdd, 0x05, 0x7d, 0x08,
	0x3e, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x77, 0x3f, 0x0d, 0x8a, 0x05, 0x00, 0x00,
}

func (m *AccessOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdentifierTemplate) > 0 {
		i -= len(m.IdentifierTemplate)
		copy(dAtA[i:], m.IdentifierTemplate)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.IdentifierTemplate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResourceType != 0 {
		i = encodeVarintAccesscontrol(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x10
	}
	if m.AccessType != 0 {
		i = encodeVarintAccesscontrol(dAtA, i, uint64(m.AccessType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WasmAccessOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WasmAccessOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WasmAccessOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelectorType != 0 {
		i = encodeVarintAccesscontrol(dAtA, i, uint64(m.SelectorType))
		i--
		dAtA[i] = 0x10
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WasmAccessOperations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WasmAccessOperations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WasmAccessOperations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WasmOperations) > 0 {
		for iNdEx := len(m.WasmOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WasmOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MessageName) > 0 {
		i -= len(m.MessageName)
		copy(dAtA[i:], m.MessageName)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.MessageName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageDependencyMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageDependencyMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageDependencyMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DynamicEnabled {
		i--
		if m.DynamicEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccessOps) > 0 {
		for iNdEx := len(m.AccessOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MessageKey) > 0 {
		i -= len(m.MessageKey)
		copy(dAtA[i:], m.MessageKey)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.MessageKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WasmDependencyMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WasmDependencyMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WasmDependencyMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResetReason) > 0 {
		i -= len(m.ResetReason)
		copy(dAtA[i:], m.ResetReason)
		i = encodeVarintAccesscontrol(dAtA, i, uint64(len(m.ResetReason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExecuteAccessOps) > 0 {
		for iNdEx := len(m.ExecuteAccessOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecuteAccessOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QueryAccessOps) > 0 {
		for iNdEx := len(m.QueryAccessOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryAccessOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BaseAccessOps) > 0 {
		for iNdEx := len(m.BaseAccessOps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseAccessOps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccesscontrol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccesscontrol(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccesscontrol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccessOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessType != 0 {
		n += 1 + sovAccesscontrol(uint64(m.AccessType))
	}
	if m.ResourceType != 0 {
		n += 1 + sovAccesscontrol(uint64(m.ResourceType))
	}
	l = len(m.IdentifierTemplate)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	return n
}

func (m *WasmAccessOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	if m.SelectorType != 0 {
		n += 1 + sovAccesscontrol(uint64(m.SelectorType))
	}
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	return n
}

func (m *WasmAccessOperations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageName)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	if len(m.WasmOperations) > 0 {
		for _, e := range m.WasmOperations {
			l = e.Size()
			n += 1 + l + sovAccesscontrol(uint64(l))
		}
	}
	return n
}

func (m *MessageDependencyMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageKey)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	if len(m.AccessOps) > 0 {
		for _, e := range m.AccessOps {
			l = e.Size()
			n += 1 + l + sovAccesscontrol(uint64(l))
		}
	}
	if m.DynamicEnabled {
		n += 2
	}
	return n
}

func (m *WasmDependencyMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if len(m.BaseAccessOps) > 0 {
		for _, e := range m.BaseAccessOps {
			l = e.Size()
			n += 1 + l + sovAccesscontrol(uint64(l))
		}
	}
	if len(m.QueryAccessOps) > 0 {
		for _, e := range m.QueryAccessOps {
			l = e.Size()
			n += 1 + l + sovAccesscontrol(uint64(l))
		}
	}
	if len(m.ExecuteAccessOps) > 0 {
		for _, e := range m.ExecuteAccessOps {
			l = e.Size()
			n += 1 + l + sovAccesscontrol(uint64(l))
		}
	}
	l = len(m.ResetReason)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovAccesscontrol(uint64(l))
	}
	return n
}

func sovAccesscontrol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccesscontrol(x uint64) (n int) {
	return sovAccesscontrol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccessOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			m.AccessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessType |= AccessType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= ResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierTemplate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesscontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WasmAccessOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WasmAccessOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WasmAccessOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &AccessOperation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectorType", wireType)
			}
			m.SelectorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectorType |= AccessOperationSelectorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesscontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WasmAccessOperations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WasmAccessOperations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WasmAccessOperations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasmOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WasmOperations = append(m.WasmOperations, &WasmAccessOperation{})
			if err := m.WasmOperations[len(m.WasmOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesscontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageDependencyMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageDependencyMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageDependencyMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessOps = append(m.AccessOps, AccessOperation{})
			if err := m.AccessOps[len(m.AccessOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DynamicEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAccesscontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WasmDependencyMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WasmDependencyMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WasmDependencyMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccessOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAccessOps = append(m.BaseAccessOps, &WasmAccessOperation{})
			if err := m.BaseAccessOps[len(m.BaseAccessOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryAccessOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryAccessOps = append(m.QueryAccessOps, &WasmAccessOperations{})
			if err := m.QueryAccessOps[len(m.QueryAccessOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteAccessOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecuteAccessOps = append(m.ExecuteAccessOps, &WasmAccessOperations{})
			if err := m.ExecuteAccessOps[len(m.ExecuteAccessOps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResetReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccesscontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccesscontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccesscontrol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccesscontrol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccesscontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccesscontrol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccesscontrol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccesscontrol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccesscontrol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccesscontrol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccesscontrol = fmt.Errorf("proto: unexpected end of group")
)
